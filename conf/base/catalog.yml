# Energy data
household_power_consumption:
  type: pandas.CSVDataset
  filepath: data/01_raw/household_power_consumption.zip
  load_args:
    sep: ";"
    compression: zip
    header: 0
    na_values: ["?"]
    dtype:
      Date: str
      Time: str
      Global_active_power: float64

# Weather data - part 1
weather_data_part1:
  type: pandas.CSVDataset
  filepath: data/01_raw/weather_data_part1.csv
  load_args:
    parse_dates: ['datetime', 'sunrise', 'sunset']
    index_col: 'datetime'
    sep: ","

# Weather data - part 2
weather_data_part2:
  type: pandas.CSVDataset
  filepath: data/01_raw/weather_data_part2.csv
  load_args:
    parse_dates: ['datetime', 'sunrise', 'sunset']
    index_col: 'datetime'

# French Holidays data
french_holidays:
  type: pandas.CSVDataset
  filepath: data/01_raw/french_holidays.csv
  load_args:
    parse_dates: ['date']
    sep: ","

# Processed Weather and consumption data
processed_weather_and_consumption_data:
  type: pandas.CSVDataset
  filepath: data/02_processed/processed_weather_and_consumption_data.csv
  save_args:
    index: true  # Ensure the index is saved to the CSV
  load_args:
    index_col: 0  # Load the first column as the index
    parse_dates: [0]  # Interpret the first column (index) as dates

# X_train 
X_train:
  type: pandas.CSVDataset
  filepath: data/03_training_data/X_train.csv
  save_args:
    index: true 
  load_args:
    index_col: 0
    parse_dates: [0]

# y_train
y_train:
  type: pandas.CSVDataset
  filepath: data/03_training_data/y_train.csv
  save_args:
    index: true
  load_args:
    index_col: 0
    parse_dates: [0]

# X_test
X_test:
  type: pandas.CSVDataset
  filepath: data/03_training_data/X_test.csv
  save_args:
    index: true
  load_args:
    index_col: 0
    parse_dates: [0]

# y_test
y_test:
  type: pandas.CSVDataset
  filepath: data/03_training_data/y_test.csv
  save_args:
    index: true
  load_args:
    index_col: 0
    parse_dates: [0]

# Created Features
created_features:
  type: json.JSONDataset
  filepath: data/04_reporting/created_features.json

# train / test split visualization 
train_test_split_visualization:
  type: matplotlib.MatplotlibWriter
  filepath: data/04_reporting/train_test_split_visualization.png
  save_args:
    format: png

# Trained xgboost model
xgboost_model:
  type: pickle.PickleDataset
  filepath: data/05_model_output/xgboost_model.pkl
  backend: pickle

# Trained Random Forest model
random_forest_model:
  type: pickle.PickleDataset
  filepath: data/05_model_output/random_forest_model.pkl
  backend: pickle

# xgboost feature importance plot
xgboost_feature_importance_plot:
  type: matplotlib.MatplotlibWriter
  filepath: data/04_reporting/xgboost_feature_importance_plot.png
  save_args:
    format: png

# Random Forest feature importance plot
random_forest_feature_importance_plot:
  type: matplotlib.MatplotlibWriter
  filepath: data/04_reporting/random_forest_feature_importance_plot.png
  save_args:
    format: png

# real_data_and_xgboost_predictions_plot 
real_data_and_xgboost_predictions_plot:
  type: matplotlib.MatplotlibWriter
  filepath: data/04_reporting/real_data_and_xgboost_predictions_plot.png
  save_args:
    format: png

# real_data_and_rf_predictions_plot 
real_data_and_rf_predictions_plot:
  type: matplotlib.MatplotlibWriter
  filepath: data/04_reporting/real_data_and_rf_predictions_plot.png
  save_args:
    format: png